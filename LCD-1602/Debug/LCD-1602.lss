
LCD-1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000b12  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000125a  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000939  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a5a  00000000  00000000  0000288f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000032ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007bbc  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b9  00000000  00000000  0000afe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000b8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002ef8  00000000  00000000  0000b909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	ed d1       	rcall	.+986    	; 0x466 <main>
  8c:	40 c5       	rjmp	.+2688   	; 0xb0e <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8b 60       	ori	r24, 0x0B	; 11
  9a:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
  9c:	20 9a       	sbi	0x04, 0	; 4
  9e:	08 95       	ret

000000a0 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	00 d0       	rcall	.+0      	; 0xa6 <lcd_write_4+0x6>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <lcd_write_4+0x8>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	1a 82       	std	Y+2, r1	; 0x02
  b0:	1b 82       	std	Y+3, r1	; 0x03
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	27 e0       	ldi	r18, 0x07	; 7
  ba:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  bc:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
  be:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  c0:	ac 01       	movw	r20, r24
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <lcd_write_4+0x2a>
  c6:	55 95       	asr	r21
  c8:	47 95       	ror	r20
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <lcd_write_4+0x26>
  ce:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
  d0:	60 83       	st	Z, r22
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
  d8:	23 30       	cpi	r18, 0x03	; 3
  da:	31 05       	cpc	r19, r1
  dc:	89 f7       	brne	.-30     	; 0xc0 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
  e4:	2b b1       	in	r18, 0x0b	; 11
  e6:	49 81       	ldd	r20, Y+1	; 0x01
  e8:	30 e8       	ldi	r19, 0x80	; 128
  ea:	43 9f       	mul	r20, r19
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	30 e4       	ldi	r19, 0x40	; 64
  f4:	93 9f       	mul	r25, r19
  f6:	a0 01       	movw	r20, r0
  f8:	11 24       	eor	r1, r1
  fa:	48 2b       	or	r20, r24
  fc:	42 2b       	or	r20, r18
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	98 9f       	mul	r25, r24
 104:	90 01       	movw	r18, r0
 106:	11 24       	eor	r1, r1
 108:	24 2b       	or	r18, r20
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	30 e1       	ldi	r19, 0x10	; 16
 10e:	93 9f       	mul	r25, r19
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 118:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_write_4+0x7c>
 120:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 122:	5b 98       	cbi	0x0b, 3	; 11
 124:	35 e0       	ldi	r19, 0x05	; 5
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_4+0x86>
 12a:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 13e:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 140:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 142:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 144:	ad df       	rcall	.-166    	; 0xa0 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 146:	8c 2f       	mov	r24, r28
 148:	82 95       	swap	r24
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	a9 df       	rcall	.-174    	; 0xa0 <lcd_write_4>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 156:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 158:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 15a:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 15c:	a1 df       	rcall	.-190    	; 0xa0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 15e:	8c 2f       	mov	r24, r28
 160:	82 95       	swap	r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	9d df       	rcall	.-198    	; 0xa0 <lcd_write_4>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 16a:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 16c:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 16e:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 170:	5b 9a       	sbi	0x0b, 3	; 11
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_check_BF_4+0xa>
 178:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 17a:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 17c:	5b 98       	cbi	0x0b, 3	; 11
 17e:	95 e0       	ldi	r25, 0x05	; 5
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_check_BF_4+0x16>
 184:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 186:	5b 9a       	sbi	0x0b, 3	; 11
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_check_BF_4+0x20>
 18e:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 190:	5b 98       	cbi	0x0b, 3	; 11
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_check_BF_4+0x2a>
 198:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 19a:	88 23       	and	r24, r24
 19c:	4c f3       	brlt	.-46     	; 0x170 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 19e:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 1a0:	57 9a       	sbi	0x0a, 7	; 10
 1a2:	08 95       	ret

000001a4 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	81 ee       	ldi	r24, 0xE1	; 225
 1a8:	94 e0       	ldi	r25, 0x04	; 4
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <lcd_init_4f+0x6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init_4f+0x10>
 1b4:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 1b6:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 1b8:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 1ba:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	70 df       	rcall	.-288    	; 0xa0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	25 e3       	ldi	r18, 0x35	; 53
 1c2:	2a 95       	dec	r18
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init_4f+0x1e>
 1c6:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	6a df       	rcall	.-300    	; 0xa0 <lcd_write_4>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init_4f+0x2c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 1d6:	00 00       	nop
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	62 df       	rcall	.-316    	; 0xa0 <lcd_write_4>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init_4f+0x3c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 1e6:	00 00       	nop
 1e8:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 1ea:	5a df       	rcall	.-332    	; 0xa0 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 1ec:	be df       	rcall	.-132    	; 0x16a <lcd_check_BF_4>
 1ee:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 1f0:	b0 df       	rcall	.-160    	; 0x152 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 1f2:	bb df       	rcall	.-138    	; 0x16a <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 1f4:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 1f6:	ad df       	rcall	.-166    	; 0x152 <lcd_write_instruction_4f>
 1f8:	b8 df       	rcall	.-144    	; 0x16a <lcd_check_BF_4>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 1fc:	aa df       	rcall	.-172    	; 0x152 <lcd_write_instruction_4f>
 1fe:	b5 df       	rcall	.-150    	; 0x16a <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	a7 df       	rcall	.-178    	; 0x152 <lcd_write_instruction_4f>
 204:	b2 df       	rcall	.-156    	; 0x16a <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	a4 cf       	rjmp	.-184    	; 0x152 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 20a:	08 95       	ret

0000020c <initLCD>:
 20c:	41 df       	rcall	.-382    	; 0x90 <configLCDPorts>
 20e:	ca df       	rcall	.-108    	; 0x1a4 <lcd_init_4f>
 210:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	81 ee       	ldi	r24, 0xE1	; 225
 214:	94 e0       	ldi	r25, 0x04	; 4
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <initLCD+0xa>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <initLCD+0x14>
 220:	00 00       	nop
 222:	08 95       	ret

00000224 <lcd_write_string_4f>:
 224:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <lcd_write_string_4f+0xa>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 238:	e9 81       	ldd	r30, Y+1	; 0x01
 23a:	fa 81       	ldd	r31, Y+2	; 0x02
 23c:	e8 0f       	add	r30, r24
 23e:	f9 1f       	adc	r31, r25
 240:	80 81       	ld	r24, Z
 242:	88 23       	and	r24, r24
 244:	99 f0       	breq	.+38     	; 0x26c <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 246:	91 df       	rcall	.-222    	; 0x16a <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
 248:	e9 81       	ldd	r30, Y+1	; 0x01
 24a:	fa 81       	ldd	r31, Y+2	; 0x02
 24c:	e0 0f       	add	r30, r16
 24e:	f1 1f       	adc	r31, r17
 250:	80 81       	ld	r24, Z
 252:	73 df       	rcall	.-282    	; 0x13a <lcd_write_character_4f>
        i++;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 25e:	e9 81       	ldd	r30, Y+1	; 0x01
 260:	fa 81       	ldd	r31, Y+2	; 0x02
 262:	e0 0f       	add	r30, r16
 264:	f1 1f       	adc	r31, r17
 266:	80 81       	ld	r24, Z
 268:	81 11       	cpse	r24, r1
 26a:	ed cf       	rjmp	.-38     	; 0x246 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	a7 97       	sbiw	r28, 0x27	; 39
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	d8 2e       	mov	r13, r24
 29a:	e6 2e       	mov	r14, r22
 29c:	f7 2e       	mov	r15, r23
 29e:	84 2f       	mov	r24, r20
 2a0:	89 01       	movw	r16, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 2a2:	20 e2       	ldi	r18, 0x20	; 32
 2a4:	30 e2       	ldi	r19, 0x20	; 32
 2a6:	3a 83       	std	Y+2, r19	; 0x02
 2a8:	29 83       	std	Y+1, r18	; 0x01
 2aa:	20 e2       	ldi	r18, 0x20	; 32
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	3c 83       	std	Y+4, r19	; 0x04
 2b0:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[17];
	char emptyString[] = "                 ";	//17 empty spaces
 2b2:	92 e1       	ldi	r25, 0x12	; 18
 2b4:	e4 e1       	ldi	r30, 0x14	; 20
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	de 01       	movw	r26, r28
 2ba:	56 96       	adiw	r26, 0x16	; 22
 2bc:	01 90       	ld	r0, Z+
 2be:	0d 92       	st	X+, r0
 2c0:	9a 95       	dec	r25
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 2c4:	4f 3f       	cpi	r20, 0xFF	; 255
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2c8:	4a e0       	ldi	r20, 0x0A	; 10
 2ca:	be 01       	movw	r22, r28
 2cc:	6f 5f       	subi	r22, 0xFF	; 255
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	04 d1       	rcall	.+520    	; 0x4dc <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	8e 2d       	mov	r24, r14
 2da:	9f 2d       	mov	r25, r15
 2dc:	f6 d0       	rcall	.+492    	; 0x4ca <strcmp>
 2de:	89 2b       	or	r24, r25
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <updateLCDScreen+0x6a>
 2e2:	8c c0       	rjmp	.+280    	; 0x3fc <updateLCDScreen+0x182>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	c8 01       	movw	r24, r16
 2ea:	ef d0       	rcall	.+478    	; 0x4ca <strcmp>
 2ec:	89 2b       	or	r24, r25
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <updateLCDScreen+0x7a>
 2f0:	05 e2       	ldi	r16, 0x25	; 37
 2f2:	11 e0       	ldi	r17, 0x01	; 1
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 2f4:	ce 01       	movw	r24, r28
 2f6:	46 96       	adiw	r24, 0x16	; 22
 2f8:	9f 93       	push	r25
 2fa:	8f 93       	push	r24
 2fc:	1f 93       	push	r17
 2fe:	0f 93       	push	r16
 300:	45 97       	sbiw	r24, 0x15	; 21
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	ff 92       	push	r15
 308:	ef 92       	push	r14
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	1f 92       	push	r1
 314:	81 e1       	ldi	r24, 0x11	; 17
 316:	8f 93       	push	r24
 318:	ce 01       	movw	r24, r28
 31a:	05 96       	adiw	r24, 0x05	; 5
 31c:	9f 93       	push	r25
 31e:	8f 93       	push	r24
 320:	00 d1       	rcall	.+512    	; 0x522 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 322:	6e e0       	ldi	r22, 0x0E	; 14
 324:	71 e0       	ldi	r23, 0x01	; 1
 326:	8e 2d       	mov	r24, r14
 328:	9f 2d       	mov	r25, r15
 32a:	cf d0       	rcall	.+414    	; 0x4ca <strcmp>
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	89 2b       	or	r24, r25
 338:	a9 f4       	brne	.+42     	; 0x364 <updateLCDScreen+0xea>
 33a:	ce 01       	movw	r24, r28
 33c:	46 96       	adiw	r24, 0x16	; 22
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	8b e0       	ldi	r24, 0x0B	; 11
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	9f 93       	push	r25
 348:	8f 93       	push	r24
 34a:	1f 92       	push	r1
 34c:	81 e1       	ldi	r24, 0x11	; 17
 34e:	8f 93       	push	r24
 350:	ce 01       	movw	r24, r28
 352:	05 96       	adiw	r24, 0x05	; 5
 354:	9f 93       	push	r25
 356:	8f 93       	push	r24
 358:	e4 d0       	rcall	.+456    	; 0x522 <snprintf>
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	d9 16       	cp	r13, r25
 368:	21 f0       	breq	.+8      	; 0x372 <updateLCDScreen+0xf8>
 36a:	22 e0       	ldi	r18, 0x02	; 2
 36c:	d2 16       	cp	r13, r18
 36e:	69 f0       	breq	.+26     	; 0x38a <updateLCDScreen+0x110>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
 370:	17 c0       	rjmp	.+46     	; 0x3a0 <updateLCDScreen+0x126>
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	ee de       	rcall	.-548    	; 0x152 <lcd_write_instruction_4f>
 376:	3f ef       	ldi	r19, 0xFF	; 255
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	31 50       	subi	r19, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <updateLCDScreen+0x102>
 384:	00 c0       	rjmp	.+0      	; 0x386 <updateLCDScreen+0x10c>
 386:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
 388:	0b c0       	rjmp	.+22     	; 0x3a0 <updateLCDScreen+0x126>
 38a:	80 ec       	ldi	r24, 0xC0	; 192
 38c:	e2 de       	rcall	.-572    	; 0x152 <lcd_write_instruction_4f>
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	30 e7       	ldi	r19, 0x70	; 112
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	21 50       	subi	r18, 0x01	; 1
 396:	30 40       	sbci	r19, 0x00	; 0
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <updateLCDScreen+0x11a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <updateLCDScreen+0x124>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
 39e:	00 00       	nop
 3a0:	ce 01       	movw	r24, r28
 3a2:	05 96       	adiw	r24, 0x05	; 5
 3a4:	3f df       	rcall	.-386    	; 0x224 <lcd_write_string_4f>
 3a6:	9f ef       	ldi	r25, 0xFF	; 255
 3a8:	20 e7       	ldi	r18, 0x70	; 112
 3aa:	32 e0       	ldi	r19, 0x02	; 2
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	20 40       	sbci	r18, 0x00	; 0
 3b0:	30 40       	sbci	r19, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <updateLCDScreen+0x132>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <updateLCDScreen+0x13c>
 3b6:	00 00       	nop
}
 3b8:	46 c0       	rjmp	.+140    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 3ba:	ce 01       	movw	r24, r28
 3bc:	46 96       	adiw	r24, 0x16	; 22
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	85 e2       	ldi	r24, 0x25	; 37
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	9e 01       	movw	r18, r28
 3cc:	2f 5f       	subi	r18, 0xFF	; 255
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	3f 93       	push	r19
 3d2:	2f 93       	push	r18
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	1f 92       	push	r1
 3e2:	81 e1       	ldi	r24, 0x11	; 17
 3e4:	8f 93       	push	r24
 3e6:	ce 01       	movw	r24, r28
 3e8:	05 96       	adiw	r24, 0x05	; 5
 3ea:	9f 93       	push	r25
 3ec:	8f 93       	push	r24
 3ee:	99 d0       	rcall	.+306    	; 0x522 <snprintf>
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	char charRow[17];
	char emptyString[] = "                 ";	//17 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 3fa:	b4 cf       	rjmp	.-152    	; 0x364 <updateLCDScreen+0xea>
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	71 e0       	ldi	r23, 0x01	; 1
 400:	c8 01       	movw	r24, r16
 402:	63 d0       	rcall	.+198    	; 0x4ca <strcmp>
 404:	89 2b       	or	r24, r25
 406:	c9 f2       	breq	.-78     	; 0x3ba <updateLCDScreen+0x140>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 408:	ce 01       	movw	r24, r28
 40a:	46 96       	adiw	r24, 0x16	; 22
 40c:	9f 93       	push	r25
 40e:	8f 93       	push	r24
 410:	1f 93       	push	r17
 412:	0f 93       	push	r16
 414:	45 97       	sbiw	r24, 0x15	; 21
 416:	9f 93       	push	r25
 418:	8f 93       	push	r24
 41a:	85 e2       	ldi	r24, 0x25	; 37
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	9f 93       	push	r25
 420:	8f 93       	push	r24
 422:	85 e0       	ldi	r24, 0x05	; 5
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	9f 93       	push	r25
 428:	8f 93       	push	r24
 42a:	1f 92       	push	r1
 42c:	81 e1       	ldi	r24, 0x11	; 17
 42e:	8f 93       	push	r24
 430:	ce 01       	movw	r24, r28
 432:	05 96       	adiw	r24, 0x05	; 5
 434:	9f 93       	push	r25
 436:	8f 93       	push	r24
 438:	74 d0       	rcall	.+232    	; 0x522 <snprintf>
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	8f cf       	rjmp	.-226    	; 0x364 <updateLCDScreen+0xea>
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
 446:	a7 96       	adiw	r28, 0x27	; 39
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	08 95       	ret

00000462 <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
 462:	0b cf       	rjmp	.-490    	; 0x27a <updateLCDScreen>
 464:	08 95       	ret

00000466 <main>:
int main(void)
{
	uint8_t temperature = 16; //C
	uint8_t rel_humidity = 42; //%
	
	initLCD();
 466:	d2 de       	rcall	.-604    	; 0x20c <initLCD>
//displayLCD_main(row on LCD, "Text 1", number, "Text 2");		
	displayLCD_main(1, "Hello there!", NONE, "NONE"); _delay_ms(1000);
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	31 e0       	ldi	r19, 0x01	; 1
 46c:	4f ef       	ldi	r20, 0xFF	; 255
 46e:	66 e2       	ldi	r22, 0x26	; 38
 470:	71 e0       	ldi	r23, 0x01	; 1
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	f6 df       	rcall	.-20     	; 0x462 <displayLCD_main>
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	83 ed       	ldi	r24, 0xD3	; 211
 47a:	90 e3       	ldi	r25, 0x30	; 48
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x16>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x20>
 486:	00 00       	nop
	displayLCD_main(1, "CLEAR", NONE, "NONE");
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	31 e0       	ldi	r19, 0x01	; 1
 48c:	4f ef       	ldi	r20, 0xFF	; 255
 48e:	6e e0       	ldi	r22, 0x0E	; 14
 490:	71 e0       	ldi	r23, 0x01	; 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	e6 df       	rcall	.-52     	; 0x462 <displayLCD_main>
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	83 ed       	ldi	r24, 0xD3	; 211
 49a:	90 e3       	ldi	r25, 0x30	; 48
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <main+0x36>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x40>
 4a6:	00 00       	nop
	
	_delay_ms(1000);
	
	displayLCD_main(1, "Temperature: ", temperature, "C");
 4a8:	23 e3       	ldi	r18, 0x33	; 51
 4aa:	31 e0       	ldi	r19, 0x01	; 1
 4ac:	40 e1       	ldi	r20, 0x10	; 16
 4ae:	65 e3       	ldi	r22, 0x35	; 53
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	d6 df       	rcall	.-84     	; 0x462 <displayLCD_main>
	displayLCD_main(2, "Humidity: ", rel_humidity, "%");
 4b6:	23 e4       	ldi	r18, 0x43	; 67
 4b8:	31 e0       	ldi	r19, 0x01	; 1
 4ba:	4a e2       	ldi	r20, 0x2A	; 42
 4bc:	65 e4       	ldi	r22, 0x45	; 69
 4be:	71 e0       	ldi	r23, 0x01	; 1
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	cf df       	rcall	.-98     	; 0x462 <displayLCD_main>

	return 0;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	08 95       	ret

000004ca <strcmp>:
 4ca:	fb 01       	movw	r30, r22
 4cc:	dc 01       	movw	r26, r24
 4ce:	8d 91       	ld	r24, X+
 4d0:	01 90       	ld	r0, Z+
 4d2:	80 19       	sub	r24, r0
 4d4:	01 10       	cpse	r0, r1
 4d6:	d9 f3       	breq	.-10     	; 0x4ce <strcmp+0x4>
 4d8:	99 0b       	sbc	r25, r25
 4da:	08 95       	ret

000004dc <__itoa_ncheck>:
 4dc:	bb 27       	eor	r27, r27
 4de:	4a 30       	cpi	r20, 0x0A	; 10
 4e0:	31 f4       	brne	.+12     	; 0x4ee <__itoa_ncheck+0x12>
 4e2:	99 23       	and	r25, r25
 4e4:	22 f4       	brpl	.+8      	; 0x4ee <__itoa_ncheck+0x12>
 4e6:	bd e2       	ldi	r27, 0x2D	; 45
 4e8:	90 95       	com	r25
 4ea:	81 95       	neg	r24
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__utoa_common>

000004f0 <__utoa_ncheck>:
 4f0:	bb 27       	eor	r27, r27

000004f2 <__utoa_common>:
 4f2:	fb 01       	movw	r30, r22
 4f4:	55 27       	eor	r21, r21
 4f6:	aa 27       	eor	r26, r26
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	aa 1f       	adc	r26, r26
 4fe:	a4 17       	cp	r26, r20
 500:	10 f0       	brcs	.+4      	; 0x506 <__utoa_common+0x14>
 502:	a4 1b       	sub	r26, r20
 504:	83 95       	inc	r24
 506:	50 51       	subi	r21, 0x10	; 16
 508:	b9 f7       	brne	.-18     	; 0x4f8 <__utoa_common+0x6>
 50a:	a0 5d       	subi	r26, 0xD0	; 208
 50c:	aa 33       	cpi	r26, 0x3A	; 58
 50e:	08 f0       	brcs	.+2      	; 0x512 <__utoa_common+0x20>
 510:	a9 5d       	subi	r26, 0xD9	; 217
 512:	a1 93       	st	Z+, r26
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	79 f7       	brne	.-34     	; 0x4f6 <__utoa_common+0x4>
 518:	b1 11       	cpse	r27, r1
 51a:	b1 93       	st	Z+, r27
 51c:	11 92       	st	Z+, r1
 51e:	cb 01       	movw	r24, r22
 520:	15 c2       	rjmp	.+1066   	; 0x94c <strrev>

00000522 <snprintf>:
 522:	ae e0       	ldi	r26, 0x0E	; 14
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e6 e9       	ldi	r30, 0x96	; 150
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	c8 c2       	rjmp	.+1424   	; 0xabc <__prologue_saves__+0x1c>
 52c:	0d 89       	ldd	r16, Y+21	; 0x15
 52e:	1e 89       	ldd	r17, Y+22	; 0x16
 530:	8f 89       	ldd	r24, Y+23	; 0x17
 532:	98 8d       	ldd	r25, Y+24	; 0x18
 534:	26 e0       	ldi	r18, 0x06	; 6
 536:	2c 83       	std	Y+4, r18	; 0x04
 538:	1a 83       	std	Y+2, r17	; 0x02
 53a:	09 83       	std	Y+1, r16	; 0x01
 53c:	97 ff       	sbrs	r25, 7
 53e:	02 c0       	rjmp	.+4      	; 0x544 <snprintf+0x22>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e8       	ldi	r25, 0x80	; 128
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	9e 83       	std	Y+6, r25	; 0x06
 548:	8d 83       	std	Y+5, r24	; 0x05
 54a:	ae 01       	movw	r20, r28
 54c:	45 5e       	subi	r20, 0xE5	; 229
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
 550:	69 8d       	ldd	r22, Y+25	; 0x19
 552:	7a 8d       	ldd	r23, Y+26	; 0x1a
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	11 d0       	rcall	.+34     	; 0x57c <vfprintf>
 55a:	4d 81       	ldd	r20, Y+5	; 0x05
 55c:	5e 81       	ldd	r21, Y+6	; 0x06
 55e:	57 fd       	sbrc	r21, 7
 560:	0a c0       	rjmp	.+20     	; 0x576 <snprintf+0x54>
 562:	2f 81       	ldd	r18, Y+7	; 0x07
 564:	38 85       	ldd	r19, Y+8	; 0x08
 566:	42 17       	cp	r20, r18
 568:	53 07       	cpc	r21, r19
 56a:	0c f4       	brge	.+2      	; 0x56e <snprintf+0x4c>
 56c:	9a 01       	movw	r18, r20
 56e:	f8 01       	movw	r30, r16
 570:	e2 0f       	add	r30, r18
 572:	f3 1f       	adc	r31, r19
 574:	10 82       	st	Z, r1
 576:	2e 96       	adiw	r28, 0x0e	; 14
 578:	e4 e0       	ldi	r30, 0x04	; 4
 57a:	bc c2       	rjmp	.+1400   	; 0xaf4 <__epilogue_restores__+0x1c>

0000057c <vfprintf>:
 57c:	ab e0       	ldi	r26, 0x0B	; 11
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e3 ec       	ldi	r30, 0xC3	; 195
 582:	f2 e0       	ldi	r31, 0x02	; 2
 584:	8d c2       	rjmp	.+1306   	; 0xaa0 <__prologue_saves__>
 586:	6c 01       	movw	r12, r24
 588:	7b 01       	movw	r14, r22
 58a:	8a 01       	movw	r16, r20
 58c:	fc 01       	movw	r30, r24
 58e:	17 82       	std	Z+7, r1	; 0x07
 590:	16 82       	std	Z+6, r1	; 0x06
 592:	83 81       	ldd	r24, Z+3	; 0x03
 594:	81 ff       	sbrs	r24, 1
 596:	bf c1       	rjmp	.+894    	; 0x916 <__stack+0x17>
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	3c 01       	movw	r6, r24
 59e:	f6 01       	movw	r30, r12
 5a0:	93 81       	ldd	r25, Z+3	; 0x03
 5a2:	f7 01       	movw	r30, r14
 5a4:	93 fd       	sbrc	r25, 3
 5a6:	85 91       	lpm	r24, Z+
 5a8:	93 ff       	sbrs	r25, 3
 5aa:	81 91       	ld	r24, Z+
 5ac:	7f 01       	movw	r14, r30
 5ae:	88 23       	and	r24, r24
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <vfprintf+0x38>
 5b2:	ad c1       	rjmp	.+858    	; 0x90e <__stack+0xf>
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	39 f4       	brne	.+14     	; 0x5c6 <vfprintf+0x4a>
 5b8:	93 fd       	sbrc	r25, 3
 5ba:	85 91       	lpm	r24, Z+
 5bc:	93 ff       	sbrs	r25, 3
 5be:	81 91       	ld	r24, Z+
 5c0:	7f 01       	movw	r14, r30
 5c2:	85 32       	cpi	r24, 0x25	; 37
 5c4:	21 f4       	brne	.+8      	; 0x5ce <vfprintf+0x52>
 5c6:	b6 01       	movw	r22, r12
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	d0 d1       	rcall	.+928    	; 0x96c <fputc>
 5cc:	e8 cf       	rjmp	.-48     	; 0x59e <vfprintf+0x22>
 5ce:	91 2c       	mov	r9, r1
 5d0:	21 2c       	mov	r2, r1
 5d2:	31 2c       	mov	r3, r1
 5d4:	ff e1       	ldi	r31, 0x1F	; 31
 5d6:	f3 15       	cp	r31, r3
 5d8:	d8 f0       	brcs	.+54     	; 0x610 <vfprintf+0x94>
 5da:	8b 32       	cpi	r24, 0x2B	; 43
 5dc:	79 f0       	breq	.+30     	; 0x5fc <vfprintf+0x80>
 5de:	38 f4       	brcc	.+14     	; 0x5ee <vfprintf+0x72>
 5e0:	80 32       	cpi	r24, 0x20	; 32
 5e2:	79 f0       	breq	.+30     	; 0x602 <vfprintf+0x86>
 5e4:	83 32       	cpi	r24, 0x23	; 35
 5e6:	a1 f4       	brne	.+40     	; 0x610 <vfprintf+0x94>
 5e8:	23 2d       	mov	r18, r3
 5ea:	20 61       	ori	r18, 0x10	; 16
 5ec:	1d c0       	rjmp	.+58     	; 0x628 <vfprintf+0xac>
 5ee:	8d 32       	cpi	r24, 0x2D	; 45
 5f0:	61 f0       	breq	.+24     	; 0x60a <vfprintf+0x8e>
 5f2:	80 33       	cpi	r24, 0x30	; 48
 5f4:	69 f4       	brne	.+26     	; 0x610 <vfprintf+0x94>
 5f6:	23 2d       	mov	r18, r3
 5f8:	21 60       	ori	r18, 0x01	; 1
 5fa:	16 c0       	rjmp	.+44     	; 0x628 <vfprintf+0xac>
 5fc:	83 2d       	mov	r24, r3
 5fe:	82 60       	ori	r24, 0x02	; 2
 600:	38 2e       	mov	r3, r24
 602:	e3 2d       	mov	r30, r3
 604:	e4 60       	ori	r30, 0x04	; 4
 606:	3e 2e       	mov	r3, r30
 608:	2a c0       	rjmp	.+84     	; 0x65e <vfprintf+0xe2>
 60a:	f3 2d       	mov	r31, r3
 60c:	f8 60       	ori	r31, 0x08	; 8
 60e:	1d c0       	rjmp	.+58     	; 0x64a <vfprintf+0xce>
 610:	37 fc       	sbrc	r3, 7
 612:	2d c0       	rjmp	.+90     	; 0x66e <vfprintf+0xf2>
 614:	20 ed       	ldi	r18, 0xD0	; 208
 616:	28 0f       	add	r18, r24
 618:	2a 30       	cpi	r18, 0x0A	; 10
 61a:	40 f0       	brcs	.+16     	; 0x62c <vfprintf+0xb0>
 61c:	8e 32       	cpi	r24, 0x2E	; 46
 61e:	b9 f4       	brne	.+46     	; 0x64e <vfprintf+0xd2>
 620:	36 fc       	sbrc	r3, 6
 622:	75 c1       	rjmp	.+746    	; 0x90e <__stack+0xf>
 624:	23 2d       	mov	r18, r3
 626:	20 64       	ori	r18, 0x40	; 64
 628:	32 2e       	mov	r3, r18
 62a:	19 c0       	rjmp	.+50     	; 0x65e <vfprintf+0xe2>
 62c:	36 fe       	sbrs	r3, 6
 62e:	06 c0       	rjmp	.+12     	; 0x63c <vfprintf+0xc0>
 630:	8a e0       	ldi	r24, 0x0A	; 10
 632:	98 9e       	mul	r9, r24
 634:	20 0d       	add	r18, r0
 636:	11 24       	eor	r1, r1
 638:	92 2e       	mov	r9, r18
 63a:	11 c0       	rjmp	.+34     	; 0x65e <vfprintf+0xe2>
 63c:	ea e0       	ldi	r30, 0x0A	; 10
 63e:	2e 9e       	mul	r2, r30
 640:	20 0d       	add	r18, r0
 642:	11 24       	eor	r1, r1
 644:	22 2e       	mov	r2, r18
 646:	f3 2d       	mov	r31, r3
 648:	f0 62       	ori	r31, 0x20	; 32
 64a:	3f 2e       	mov	r3, r31
 64c:	08 c0       	rjmp	.+16     	; 0x65e <vfprintf+0xe2>
 64e:	8c 36       	cpi	r24, 0x6C	; 108
 650:	21 f4       	brne	.+8      	; 0x65a <vfprintf+0xde>
 652:	83 2d       	mov	r24, r3
 654:	80 68       	ori	r24, 0x80	; 128
 656:	38 2e       	mov	r3, r24
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0xe2>
 65a:	88 36       	cpi	r24, 0x68	; 104
 65c:	41 f4       	brne	.+16     	; 0x66e <vfprintf+0xf2>
 65e:	f7 01       	movw	r30, r14
 660:	93 fd       	sbrc	r25, 3
 662:	85 91       	lpm	r24, Z+
 664:	93 ff       	sbrs	r25, 3
 666:	81 91       	ld	r24, Z+
 668:	7f 01       	movw	r14, r30
 66a:	81 11       	cpse	r24, r1
 66c:	b3 cf       	rjmp	.-154    	; 0x5d4 <vfprintf+0x58>
 66e:	98 2f       	mov	r25, r24
 670:	9f 7d       	andi	r25, 0xDF	; 223
 672:	95 54       	subi	r25, 0x45	; 69
 674:	93 30       	cpi	r25, 0x03	; 3
 676:	28 f4       	brcc	.+10     	; 0x682 <vfprintf+0x106>
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	9f e3       	ldi	r25, 0x3F	; 63
 67e:	99 83       	std	Y+1, r25	; 0x01
 680:	0d c0       	rjmp	.+26     	; 0x69c <vfprintf+0x120>
 682:	83 36       	cpi	r24, 0x63	; 99
 684:	31 f0       	breq	.+12     	; 0x692 <vfprintf+0x116>
 686:	83 37       	cpi	r24, 0x73	; 115
 688:	71 f0       	breq	.+28     	; 0x6a6 <vfprintf+0x12a>
 68a:	83 35       	cpi	r24, 0x53	; 83
 68c:	09 f0       	breq	.+2      	; 0x690 <vfprintf+0x114>
 68e:	55 c0       	rjmp	.+170    	; 0x73a <vfprintf+0x1be>
 690:	20 c0       	rjmp	.+64     	; 0x6d2 <vfprintf+0x156>
 692:	f8 01       	movw	r30, r16
 694:	80 81       	ld	r24, Z
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	0e 5f       	subi	r16, 0xFE	; 254
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	88 24       	eor	r8, r8
 69e:	83 94       	inc	r8
 6a0:	91 2c       	mov	r9, r1
 6a2:	53 01       	movw	r10, r6
 6a4:	12 c0       	rjmp	.+36     	; 0x6ca <vfprintf+0x14e>
 6a6:	28 01       	movw	r4, r16
 6a8:	f2 e0       	ldi	r31, 0x02	; 2
 6aa:	4f 0e       	add	r4, r31
 6ac:	51 1c       	adc	r5, r1
 6ae:	f8 01       	movw	r30, r16
 6b0:	a0 80       	ld	r10, Z
 6b2:	b1 80       	ldd	r11, Z+1	; 0x01
 6b4:	36 fe       	sbrs	r3, 6
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <vfprintf+0x142>
 6b8:	69 2d       	mov	r22, r9
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0x146>
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	7f ef       	ldi	r23, 0xFF	; 255
 6c2:	c5 01       	movw	r24, r10
 6c4:	38 d1       	rcall	.+624    	; 0x936 <strnlen>
 6c6:	4c 01       	movw	r8, r24
 6c8:	82 01       	movw	r16, r4
 6ca:	f3 2d       	mov	r31, r3
 6cc:	ff 77       	andi	r31, 0x7F	; 127
 6ce:	3f 2e       	mov	r3, r31
 6d0:	15 c0       	rjmp	.+42     	; 0x6fc <vfprintf+0x180>
 6d2:	28 01       	movw	r4, r16
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	42 0e       	add	r4, r18
 6d8:	51 1c       	adc	r5, r1
 6da:	f8 01       	movw	r30, r16
 6dc:	a0 80       	ld	r10, Z
 6de:	b1 80       	ldd	r11, Z+1	; 0x01
 6e0:	36 fe       	sbrs	r3, 6
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <vfprintf+0x16e>
 6e4:	69 2d       	mov	r22, r9
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <vfprintf+0x172>
 6ea:	6f ef       	ldi	r22, 0xFF	; 255
 6ec:	7f ef       	ldi	r23, 0xFF	; 255
 6ee:	c5 01       	movw	r24, r10
 6f0:	17 d1       	rcall	.+558    	; 0x920 <strnlen_P>
 6f2:	4c 01       	movw	r8, r24
 6f4:	f3 2d       	mov	r31, r3
 6f6:	f0 68       	ori	r31, 0x80	; 128
 6f8:	3f 2e       	mov	r3, r31
 6fa:	82 01       	movw	r16, r4
 6fc:	33 fc       	sbrc	r3, 3
 6fe:	19 c0       	rjmp	.+50     	; 0x732 <vfprintf+0x1b6>
 700:	82 2d       	mov	r24, r2
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	88 16       	cp	r8, r24
 706:	99 06       	cpc	r9, r25
 708:	a0 f4       	brcc	.+40     	; 0x732 <vfprintf+0x1b6>
 70a:	b6 01       	movw	r22, r12
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	2d d1       	rcall	.+602    	; 0x96c <fputc>
 712:	2a 94       	dec	r2
 714:	f5 cf       	rjmp	.-22     	; 0x700 <vfprintf+0x184>
 716:	f5 01       	movw	r30, r10
 718:	37 fc       	sbrc	r3, 7
 71a:	85 91       	lpm	r24, Z+
 71c:	37 fe       	sbrs	r3, 7
 71e:	81 91       	ld	r24, Z+
 720:	5f 01       	movw	r10, r30
 722:	b6 01       	movw	r22, r12
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	22 d1       	rcall	.+580    	; 0x96c <fputc>
 728:	21 10       	cpse	r2, r1
 72a:	2a 94       	dec	r2
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	82 1a       	sub	r8, r18
 730:	91 08       	sbc	r9, r1
 732:	81 14       	cp	r8, r1
 734:	91 04       	cpc	r9, r1
 736:	79 f7       	brne	.-34     	; 0x716 <vfprintf+0x19a>
 738:	e1 c0       	rjmp	.+450    	; 0x8fc <vfprintf+0x380>
 73a:	84 36       	cpi	r24, 0x64	; 100
 73c:	11 f0       	breq	.+4      	; 0x742 <vfprintf+0x1c6>
 73e:	89 36       	cpi	r24, 0x69	; 105
 740:	39 f5       	brne	.+78     	; 0x790 <vfprintf+0x214>
 742:	f8 01       	movw	r30, r16
 744:	37 fe       	sbrs	r3, 7
 746:	07 c0       	rjmp	.+14     	; 0x756 <vfprintf+0x1da>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	0c 5f       	subi	r16, 0xFC	; 252
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	08 c0       	rjmp	.+16     	; 0x766 <vfprintf+0x1ea>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	07 2e       	mov	r0, r23
 75c:	00 0c       	add	r0, r0
 75e:	88 0b       	sbc	r24, r24
 760:	99 0b       	sbc	r25, r25
 762:	0e 5f       	subi	r16, 0xFE	; 254
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	f3 2d       	mov	r31, r3
 768:	ff 76       	andi	r31, 0x6F	; 111
 76a:	3f 2e       	mov	r3, r31
 76c:	97 ff       	sbrs	r25, 7
 76e:	09 c0       	rjmp	.+18     	; 0x782 <vfprintf+0x206>
 770:	90 95       	com	r25
 772:	80 95       	com	r24
 774:	70 95       	com	r23
 776:	61 95       	neg	r22
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	f0 68       	ori	r31, 0x80	; 128
 780:	3f 2e       	mov	r3, r31
 782:	2a e0       	ldi	r18, 0x0A	; 10
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	a3 01       	movw	r20, r6
 788:	2d d1       	rcall	.+602    	; 0x9e4 <__ultoa_invert>
 78a:	88 2e       	mov	r8, r24
 78c:	86 18       	sub	r8, r6
 78e:	44 c0       	rjmp	.+136    	; 0x818 <vfprintf+0x29c>
 790:	85 37       	cpi	r24, 0x75	; 117
 792:	31 f4       	brne	.+12     	; 0x7a0 <vfprintf+0x224>
 794:	23 2d       	mov	r18, r3
 796:	2f 7e       	andi	r18, 0xEF	; 239
 798:	b2 2e       	mov	r11, r18
 79a:	2a e0       	ldi	r18, 0x0A	; 10
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	25 c0       	rjmp	.+74     	; 0x7ea <vfprintf+0x26e>
 7a0:	93 2d       	mov	r25, r3
 7a2:	99 7f       	andi	r25, 0xF9	; 249
 7a4:	b9 2e       	mov	r11, r25
 7a6:	8f 36       	cpi	r24, 0x6F	; 111
 7a8:	c1 f0       	breq	.+48     	; 0x7da <vfprintf+0x25e>
 7aa:	18 f4       	brcc	.+6      	; 0x7b2 <vfprintf+0x236>
 7ac:	88 35       	cpi	r24, 0x58	; 88
 7ae:	79 f0       	breq	.+30     	; 0x7ce <vfprintf+0x252>
 7b0:	ae c0       	rjmp	.+348    	; 0x90e <__stack+0xf>
 7b2:	80 37       	cpi	r24, 0x70	; 112
 7b4:	19 f0       	breq	.+6      	; 0x7bc <vfprintf+0x240>
 7b6:	88 37       	cpi	r24, 0x78	; 120
 7b8:	21 f0       	breq	.+8      	; 0x7c2 <vfprintf+0x246>
 7ba:	a9 c0       	rjmp	.+338    	; 0x90e <__stack+0xf>
 7bc:	e9 2f       	mov	r30, r25
 7be:	e0 61       	ori	r30, 0x10	; 16
 7c0:	be 2e       	mov	r11, r30
 7c2:	b4 fe       	sbrs	r11, 4
 7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <vfprintf+0x264>
 7c6:	fb 2d       	mov	r31, r11
 7c8:	f4 60       	ori	r31, 0x04	; 4
 7ca:	bf 2e       	mov	r11, r31
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <vfprintf+0x264>
 7ce:	34 fe       	sbrs	r3, 4
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <vfprintf+0x26a>
 7d2:	29 2f       	mov	r18, r25
 7d4:	26 60       	ori	r18, 0x06	; 6
 7d6:	b2 2e       	mov	r11, r18
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <vfprintf+0x26a>
 7da:	28 e0       	ldi	r18, 0x08	; 8
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <vfprintf+0x26e>
 7e0:	20 e1       	ldi	r18, 0x10	; 16
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0x26e>
 7e6:	20 e1       	ldi	r18, 0x10	; 16
 7e8:	32 e0       	ldi	r19, 0x02	; 2
 7ea:	f8 01       	movw	r30, r16
 7ec:	b7 fe       	sbrs	r11, 7
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <vfprintf+0x282>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	0c 5f       	subi	r16, 0xFC	; 252
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	06 c0       	rjmp	.+12     	; 0x80a <vfprintf+0x28e>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 5f       	subi	r16, 0xFE	; 254
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	a3 01       	movw	r20, r6
 80c:	eb d0       	rcall	.+470    	; 0x9e4 <__ultoa_invert>
 80e:	88 2e       	mov	r8, r24
 810:	86 18       	sub	r8, r6
 812:	fb 2d       	mov	r31, r11
 814:	ff 77       	andi	r31, 0x7F	; 127
 816:	3f 2e       	mov	r3, r31
 818:	36 fe       	sbrs	r3, 6
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x2ba>
 81c:	23 2d       	mov	r18, r3
 81e:	2e 7f       	andi	r18, 0xFE	; 254
 820:	a2 2e       	mov	r10, r18
 822:	89 14       	cp	r8, r9
 824:	58 f4       	brcc	.+22     	; 0x83c <vfprintf+0x2c0>
 826:	34 fe       	sbrs	r3, 4
 828:	0b c0       	rjmp	.+22     	; 0x840 <vfprintf+0x2c4>
 82a:	32 fc       	sbrc	r3, 2
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x2c4>
 82e:	83 2d       	mov	r24, r3
 830:	8e 7e       	andi	r24, 0xEE	; 238
 832:	a8 2e       	mov	r10, r24
 834:	05 c0       	rjmp	.+10     	; 0x840 <vfprintf+0x2c4>
 836:	b8 2c       	mov	r11, r8
 838:	a3 2c       	mov	r10, r3
 83a:	03 c0       	rjmp	.+6      	; 0x842 <vfprintf+0x2c6>
 83c:	b8 2c       	mov	r11, r8
 83e:	01 c0       	rjmp	.+2      	; 0x842 <vfprintf+0x2c6>
 840:	b9 2c       	mov	r11, r9
 842:	a4 fe       	sbrs	r10, 4
 844:	0f c0       	rjmp	.+30     	; 0x864 <vfprintf+0x2e8>
 846:	fe 01       	movw	r30, r28
 848:	e8 0d       	add	r30, r8
 84a:	f1 1d       	adc	r31, r1
 84c:	80 81       	ld	r24, Z
 84e:	80 33       	cpi	r24, 0x30	; 48
 850:	21 f4       	brne	.+8      	; 0x85a <vfprintf+0x2de>
 852:	9a 2d       	mov	r25, r10
 854:	99 7e       	andi	r25, 0xE9	; 233
 856:	a9 2e       	mov	r10, r25
 858:	09 c0       	rjmp	.+18     	; 0x86c <vfprintf+0x2f0>
 85a:	a2 fe       	sbrs	r10, 2
 85c:	06 c0       	rjmp	.+12     	; 0x86a <vfprintf+0x2ee>
 85e:	b3 94       	inc	r11
 860:	b3 94       	inc	r11
 862:	04 c0       	rjmp	.+8      	; 0x86c <vfprintf+0x2f0>
 864:	8a 2d       	mov	r24, r10
 866:	86 78       	andi	r24, 0x86	; 134
 868:	09 f0       	breq	.+2      	; 0x86c <vfprintf+0x2f0>
 86a:	b3 94       	inc	r11
 86c:	a3 fc       	sbrc	r10, 3
 86e:	10 c0       	rjmp	.+32     	; 0x890 <vfprintf+0x314>
 870:	a0 fe       	sbrs	r10, 0
 872:	06 c0       	rjmp	.+12     	; 0x880 <vfprintf+0x304>
 874:	b2 14       	cp	r11, r2
 876:	80 f4       	brcc	.+32     	; 0x898 <vfprintf+0x31c>
 878:	28 0c       	add	r2, r8
 87a:	92 2c       	mov	r9, r2
 87c:	9b 18       	sub	r9, r11
 87e:	0d c0       	rjmp	.+26     	; 0x89a <vfprintf+0x31e>
 880:	b2 14       	cp	r11, r2
 882:	58 f4       	brcc	.+22     	; 0x89a <vfprintf+0x31e>
 884:	b6 01       	movw	r22, r12
 886:	80 e2       	ldi	r24, 0x20	; 32
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	70 d0       	rcall	.+224    	; 0x96c <fputc>
 88c:	b3 94       	inc	r11
 88e:	f8 cf       	rjmp	.-16     	; 0x880 <vfprintf+0x304>
 890:	b2 14       	cp	r11, r2
 892:	18 f4       	brcc	.+6      	; 0x89a <vfprintf+0x31e>
 894:	2b 18       	sub	r2, r11
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x320>
 898:	98 2c       	mov	r9, r8
 89a:	21 2c       	mov	r2, r1
 89c:	a4 fe       	sbrs	r10, 4
 89e:	0f c0       	rjmp	.+30     	; 0x8be <vfprintf+0x342>
 8a0:	b6 01       	movw	r22, r12
 8a2:	80 e3       	ldi	r24, 0x30	; 48
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	62 d0       	rcall	.+196    	; 0x96c <fputc>
 8a8:	a2 fe       	sbrs	r10, 2
 8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <vfprintf+0x35c>
 8ac:	a1 fc       	sbrc	r10, 1
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <vfprintf+0x33a>
 8b0:	88 e7       	ldi	r24, 0x78	; 120
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x33e>
 8b6:	88 e5       	ldi	r24, 0x58	; 88
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	b6 01       	movw	r22, r12
 8bc:	0c c0       	rjmp	.+24     	; 0x8d6 <vfprintf+0x35a>
 8be:	8a 2d       	mov	r24, r10
 8c0:	86 78       	andi	r24, 0x86	; 134
 8c2:	51 f0       	breq	.+20     	; 0x8d8 <vfprintf+0x35c>
 8c4:	a1 fe       	sbrs	r10, 1
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vfprintf+0x350>
 8c8:	8b e2       	ldi	r24, 0x2B	; 43
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <vfprintf+0x352>
 8cc:	80 e2       	ldi	r24, 0x20	; 32
 8ce:	a7 fc       	sbrc	r10, 7
 8d0:	8d e2       	ldi	r24, 0x2D	; 45
 8d2:	b6 01       	movw	r22, r12
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	4a d0       	rcall	.+148    	; 0x96c <fputc>
 8d8:	89 14       	cp	r8, r9
 8da:	30 f4       	brcc	.+12     	; 0x8e8 <vfprintf+0x36c>
 8dc:	b6 01       	movw	r22, r12
 8de:	80 e3       	ldi	r24, 0x30	; 48
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	44 d0       	rcall	.+136    	; 0x96c <fputc>
 8e4:	9a 94       	dec	r9
 8e6:	f8 cf       	rjmp	.-16     	; 0x8d8 <vfprintf+0x35c>
 8e8:	8a 94       	dec	r8
 8ea:	f3 01       	movw	r30, r6
 8ec:	e8 0d       	add	r30, r8
 8ee:	f1 1d       	adc	r31, r1
 8f0:	80 81       	ld	r24, Z
 8f2:	b6 01       	movw	r22, r12
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	3a d0       	rcall	.+116    	; 0x96c <fputc>
 8f8:	81 10       	cpse	r8, r1
 8fa:	f6 cf       	rjmp	.-20     	; 0x8e8 <vfprintf+0x36c>
 8fc:	22 20       	and	r2, r2
 8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
 900:	4e ce       	rjmp	.-868    	; 0x59e <vfprintf+0x22>
 902:	b6 01       	movw	r22, r12
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	31 d0       	rcall	.+98     	; 0x96c <fputc>
 90a:	2a 94       	dec	r2
 90c:	f7 cf       	rjmp	.-18     	; 0x8fc <vfprintf+0x380>
 90e:	f6 01       	movw	r30, r12
 910:	86 81       	ldd	r24, Z+6	; 0x06
 912:	97 81       	ldd	r25, Z+7	; 0x07
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	9f ef       	ldi	r25, 0xFF	; 255
 91a:	2b 96       	adiw	r28, 0x0b	; 11
 91c:	e2 e1       	ldi	r30, 0x12	; 18
 91e:	dc c0       	rjmp	.+440    	; 0xad8 <__epilogue_restores__>

00000920 <strnlen_P>:
 920:	fc 01       	movw	r30, r24
 922:	05 90       	lpm	r0, Z+
 924:	61 50       	subi	r22, 0x01	; 1
 926:	70 40       	sbci	r23, 0x00	; 0
 928:	01 10       	cpse	r0, r1
 92a:	d8 f7       	brcc	.-10     	; 0x922 <strnlen_P+0x2>
 92c:	80 95       	com	r24
 92e:	90 95       	com	r25
 930:	8e 0f       	add	r24, r30
 932:	9f 1f       	adc	r25, r31
 934:	08 95       	ret

00000936 <strnlen>:
 936:	fc 01       	movw	r30, r24
 938:	61 50       	subi	r22, 0x01	; 1
 93a:	70 40       	sbci	r23, 0x00	; 0
 93c:	01 90       	ld	r0, Z+
 93e:	01 10       	cpse	r0, r1
 940:	d8 f7       	brcc	.-10     	; 0x938 <strnlen+0x2>
 942:	80 95       	com	r24
 944:	90 95       	com	r25
 946:	8e 0f       	add	r24, r30
 948:	9f 1f       	adc	r25, r31
 94a:	08 95       	ret

0000094c <strrev>:
 94c:	dc 01       	movw	r26, r24
 94e:	fc 01       	movw	r30, r24
 950:	67 2f       	mov	r22, r23
 952:	71 91       	ld	r23, Z+
 954:	77 23       	and	r23, r23
 956:	e1 f7       	brne	.-8      	; 0x950 <strrev+0x4>
 958:	32 97       	sbiw	r30, 0x02	; 2
 95a:	04 c0       	rjmp	.+8      	; 0x964 <strrev+0x18>
 95c:	7c 91       	ld	r23, X
 95e:	6d 93       	st	X+, r22
 960:	70 83       	st	Z, r23
 962:	62 91       	ld	r22, -Z
 964:	ae 17       	cp	r26, r30
 966:	bf 07       	cpc	r27, r31
 968:	c8 f3       	brcs	.-14     	; 0x95c <strrev+0x10>
 96a:	08 95       	ret

0000096c <fputc>:
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	fb 01       	movw	r30, r22
 976:	23 81       	ldd	r18, Z+3	; 0x03
 978:	21 fd       	sbrc	r18, 1
 97a:	03 c0       	rjmp	.+6      	; 0x982 <fputc+0x16>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	2c c0       	rjmp	.+88     	; 0x9da <fputc+0x6e>
 982:	22 ff       	sbrs	r18, 2
 984:	16 c0       	rjmp	.+44     	; 0x9b2 <fputc+0x46>
 986:	46 81       	ldd	r20, Z+6	; 0x06
 988:	57 81       	ldd	r21, Z+7	; 0x07
 98a:	24 81       	ldd	r18, Z+4	; 0x04
 98c:	35 81       	ldd	r19, Z+5	; 0x05
 98e:	42 17       	cp	r20, r18
 990:	53 07       	cpc	r21, r19
 992:	44 f4       	brge	.+16     	; 0x9a4 <fputc+0x38>
 994:	a0 81       	ld	r26, Z
 996:	b1 81       	ldd	r27, Z+1	; 0x01
 998:	9d 01       	movw	r18, r26
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	31 83       	std	Z+1, r19	; 0x01
 9a0:	20 83       	st	Z, r18
 9a2:	8c 93       	st	X, r24
 9a4:	26 81       	ldd	r18, Z+6	; 0x06
 9a6:	37 81       	ldd	r19, Z+7	; 0x07
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	37 83       	std	Z+7, r19	; 0x07
 9ae:	26 83       	std	Z+6, r18	; 0x06
 9b0:	14 c0       	rjmp	.+40     	; 0x9da <fputc+0x6e>
 9b2:	8b 01       	movw	r16, r22
 9b4:	ec 01       	movw	r28, r24
 9b6:	fb 01       	movw	r30, r22
 9b8:	00 84       	ldd	r0, Z+8	; 0x08
 9ba:	f1 85       	ldd	r31, Z+9	; 0x09
 9bc:	e0 2d       	mov	r30, r0
 9be:	09 95       	icall
 9c0:	89 2b       	or	r24, r25
 9c2:	e1 f6       	brne	.-72     	; 0x97c <fputc+0x10>
 9c4:	d8 01       	movw	r26, r16
 9c6:	16 96       	adiw	r26, 0x06	; 6
 9c8:	8d 91       	ld	r24, X+
 9ca:	9c 91       	ld	r25, X
 9cc:	17 97       	sbiw	r26, 0x07	; 7
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	17 96       	adiw	r26, 0x07	; 7
 9d2:	9c 93       	st	X, r25
 9d4:	8e 93       	st	-X, r24
 9d6:	16 97       	sbiw	r26, 0x06	; 6
 9d8:	ce 01       	movw	r24, r28
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	08 95       	ret

000009e4 <__ultoa_invert>:
 9e4:	fa 01       	movw	r30, r20
 9e6:	aa 27       	eor	r26, r26
 9e8:	28 30       	cpi	r18, 0x08	; 8
 9ea:	51 f1       	breq	.+84     	; 0xa40 <__ultoa_invert+0x5c>
 9ec:	20 31       	cpi	r18, 0x10	; 16
 9ee:	81 f1       	breq	.+96     	; 0xa50 <__ultoa_invert+0x6c>
 9f0:	e8 94       	clt
 9f2:	6f 93       	push	r22
 9f4:	6e 7f       	andi	r22, 0xFE	; 254
 9f6:	6e 5f       	subi	r22, 0xFE	; 254
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	af 4f       	sbci	r26, 0xFF	; 255
 a00:	b1 e0       	ldi	r27, 0x01	; 1
 a02:	3e d0       	rcall	.+124    	; 0xa80 <__ultoa_invert+0x9c>
 a04:	b4 e0       	ldi	r27, 0x04	; 4
 a06:	3c d0       	rcall	.+120    	; 0xa80 <__ultoa_invert+0x9c>
 a08:	67 0f       	add	r22, r23
 a0a:	78 1f       	adc	r23, r24
 a0c:	89 1f       	adc	r24, r25
 a0e:	9a 1f       	adc	r25, r26
 a10:	a1 1d       	adc	r26, r1
 a12:	68 0f       	add	r22, r24
 a14:	79 1f       	adc	r23, r25
 a16:	8a 1f       	adc	r24, r26
 a18:	91 1d       	adc	r25, r1
 a1a:	a1 1d       	adc	r26, r1
 a1c:	6a 0f       	add	r22, r26
 a1e:	71 1d       	adc	r23, r1
 a20:	81 1d       	adc	r24, r1
 a22:	91 1d       	adc	r25, r1
 a24:	a1 1d       	adc	r26, r1
 a26:	20 d0       	rcall	.+64     	; 0xa68 <__ultoa_invert+0x84>
 a28:	09 f4       	brne	.+2      	; 0xa2c <__ultoa_invert+0x48>
 a2a:	68 94       	set
 a2c:	3f 91       	pop	r19
 a2e:	2a e0       	ldi	r18, 0x0A	; 10
 a30:	26 9f       	mul	r18, r22
 a32:	11 24       	eor	r1, r1
 a34:	30 19       	sub	r19, r0
 a36:	30 5d       	subi	r19, 0xD0	; 208
 a38:	31 93       	st	Z+, r19
 a3a:	de f6       	brtc	.-74     	; 0x9f2 <__ultoa_invert+0xe>
 a3c:	cf 01       	movw	r24, r30
 a3e:	08 95       	ret
 a40:	46 2f       	mov	r20, r22
 a42:	47 70       	andi	r20, 0x07	; 7
 a44:	40 5d       	subi	r20, 0xD0	; 208
 a46:	41 93       	st	Z+, r20
 a48:	b3 e0       	ldi	r27, 0x03	; 3
 a4a:	0f d0       	rcall	.+30     	; 0xa6a <__ultoa_invert+0x86>
 a4c:	c9 f7       	brne	.-14     	; 0xa40 <__ultoa_invert+0x5c>
 a4e:	f6 cf       	rjmp	.-20     	; 0xa3c <__ultoa_invert+0x58>
 a50:	46 2f       	mov	r20, r22
 a52:	4f 70       	andi	r20, 0x0F	; 15
 a54:	40 5d       	subi	r20, 0xD0	; 208
 a56:	4a 33       	cpi	r20, 0x3A	; 58
 a58:	18 f0       	brcs	.+6      	; 0xa60 <__ultoa_invert+0x7c>
 a5a:	49 5d       	subi	r20, 0xD9	; 217
 a5c:	31 fd       	sbrc	r19, 1
 a5e:	40 52       	subi	r20, 0x20	; 32
 a60:	41 93       	st	Z+, r20
 a62:	02 d0       	rcall	.+4      	; 0xa68 <__ultoa_invert+0x84>
 a64:	a9 f7       	brne	.-22     	; 0xa50 <__ultoa_invert+0x6c>
 a66:	ea cf       	rjmp	.-44     	; 0xa3c <__ultoa_invert+0x58>
 a68:	b4 e0       	ldi	r27, 0x04	; 4
 a6a:	a6 95       	lsr	r26
 a6c:	97 95       	ror	r25
 a6e:	87 95       	ror	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	ba 95       	dec	r27
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0x86>
 a78:	00 97       	sbiw	r24, 0x00	; 0
 a7a:	61 05       	cpc	r22, r1
 a7c:	71 05       	cpc	r23, r1
 a7e:	08 95       	ret
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	0a 2e       	mov	r0, r26
 a86:	06 94       	lsr	r0
 a88:	57 95       	ror	r21
 a8a:	47 95       	ror	r20
 a8c:	37 95       	ror	r19
 a8e:	27 95       	ror	r18
 a90:	ba 95       	dec	r27
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__ultoa_invert+0xa2>
 a94:	62 0f       	add	r22, r18
 a96:	73 1f       	adc	r23, r19
 a98:	84 1f       	adc	r24, r20
 a9a:	95 1f       	adc	r25, r21
 a9c:	a0 1d       	adc	r26, r0
 a9e:	08 95       	ret

00000aa0 <__prologue_saves__>:
 aa0:	2f 92       	push	r2
 aa2:	3f 92       	push	r3
 aa4:	4f 92       	push	r4
 aa6:	5f 92       	push	r5
 aa8:	6f 92       	push	r6
 aaa:	7f 92       	push	r7
 aac:	8f 92       	push	r8
 aae:	9f 92       	push	r9
 ab0:	af 92       	push	r10
 ab2:	bf 92       	push	r11
 ab4:	cf 92       	push	r12
 ab6:	df 92       	push	r13
 ab8:	ef 92       	push	r14
 aba:	ff 92       	push	r15
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
 ac8:	ca 1b       	sub	r28, r26
 aca:	db 0b       	sbc	r29, r27
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	de bf       	out	0x3e, r29	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	cd bf       	out	0x3d, r28	; 61
 ad6:	09 94       	ijmp

00000ad8 <__epilogue_restores__>:
 ad8:	2a 88       	ldd	r2, Y+18	; 0x12
 ada:	39 88       	ldd	r3, Y+17	; 0x11
 adc:	48 88       	ldd	r4, Y+16	; 0x10
 ade:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae8:	aa 84       	ldd	r10, Y+10	; 0x0a
 aea:	b9 84       	ldd	r11, Y+9	; 0x09
 aec:	c8 84       	ldd	r12, Y+8	; 0x08
 aee:	df 80       	ldd	r13, Y+7	; 0x07
 af0:	ee 80       	ldd	r14, Y+6	; 0x06
 af2:	fd 80       	ldd	r15, Y+5	; 0x05
 af4:	0c 81       	ldd	r16, Y+4	; 0x04
 af6:	1b 81       	ldd	r17, Y+3	; 0x03
 af8:	aa 81       	ldd	r26, Y+2	; 0x02
 afa:	b9 81       	ldd	r27, Y+1	; 0x01
 afc:	ce 0f       	add	r28, r30
 afe:	d1 1d       	adc	r29, r1
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	f8 94       	cli
 b04:	de bf       	out	0x3e, r29	; 62
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	cd bf       	out	0x3d, r28	; 61
 b0a:	ed 01       	movw	r28, r26
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
